/*
 * File:   newmainXC16.c
 * Author: mccda
 *
 * Created on November 16, 2017, 10:19 PM
 */


#pragma config ICS = PGx3 //this allows debugging.... use PGC/D pair 3 (pins 9,10) for debugging
#pragma config FNOSC = FRCDIV // select 8MHz oscillator with postscaler

#include "xc.h"
#define FCY 4000000
#include <libpic30.h>

int main(void) {
    

	/*** Configure Desired Port Pins as Analog Inputs ***/
	_TRISB2 = 1;		// TRISA/B, pg. 45 datasheet
	_ANSB2 = 1;			// ANSA/B, pg. 136-137
	_TRISB14 = 1;		// TRISA/B, pg. 45 datasheet
	_ANSB14 = 1;			// ANSA/B, pg. 136-137
	_TRISB15 = 1;		// TRISA/B, pg. 45 datasheet
	_ANSB15 = 1;			// ANSA/B, pg. 136-137


	/*** Select Voltage Reference Source ***/
	// use AVdd for positive reference
	_PVCFG = 00;		// AD1CON2<15:14>, pg. 212-213 datasheet
	// use AVss for negative reference
	_NVCFG = 0;			// AD1CON2<13>


	/*** Select Analog Conversion Clock Rate ***/
	// make sure Tad is at least 600ns, see Table 29-41 datasheet
	_ADCS = 0x02;	// AD1CON3<7:0>, pg. 213 datasheet


	/*** Select Sample/Conversion Sequence ***/
	// use auto-convert
	_SSRC = 0b0111;		// AD1CON1<7:4>, pg. 211 datasheet
	// use auto-sample
	_ASAM = 1;			// AD1CON1<2>
	// choose a sample time >= 1 Tad, see Table 29-41 datasheet
	_SAMC = 0b0001;		// AD1CON3<12:8> //make this 3


	/*** Choose Analog Channels to be Used ***/
	// scan inputs
	_CSCNA = 1;			// AD1CON2<10>
	// choose which channels to scan, e.g. for ch AN12, set _CSS12 = 1;
	_CSS4 = 1;			// AD1CSSH/L, pg. 217
	_CSS9 = 1;			// AD1CSSH/L, pg. 217
	_CSS10 = 1;			// AD1CSSH/L, pg. 217


	/*** Select How Results are Presented in Buffer ***/
	// set 12-bit resolution
	_MODE12 = 1;		// AD1CON1<10>
	// use absolute decimal format
	_FORM = 00;			// AD1CON1<9:8>
	// load results into buffer determined by converted channel, e.g. ch AN12 
    // results appear in ADC1BUF12
	_BUFREGEN = 1;		// AD1CON2<11>


	/*** Select Interrupt Rate ***/
	// interrupt rate should reflect number of analog channels used, e.g. if 
    // 5 channels, interrupt every 5th sample
	_SMPI = 2;		// AD1CON2<6:2>


	/*** Turn on A/D Module ***/
	_ADON = 1;			// AD1CON1<15>
    
    
    
    
    
    
    
    //-----------------------------------------------------------
    // CONFIGURE PWM1 USING OC1 (on pin 14)
    
    TRISAbits.TRISA6 = 0;
    
    // Clear control bits initially
    OC1CON1 = 0;
    OC1CON2 = 0;
   
    // Set period and duty cycle
    OC1R = 3000;                // Set Output Compare value to achieve
                                // desired duty cycle. This is the number
                                // of timer counts when the OC should send
                                // the PWM signal low. The duty cycle as a
                                // fraction is OC1R/OC1RS.
    OC1RS = 3999;               // Period of OC1 to achieve desired PWM 
                                // frequency, FPWM. See Equation 15-1
                                // in the datasheet. For example, for
                                // FPWM = 1 kHz, OC1RS = 3999. The OC1RS 
                                // register contains the period when the
                                // SYNCSEL bits are set to 0x1F (see FRM)
    
    // Configure OC1
    OC1CON1bits.OCTSEL = 0b111; // System (peripheral) clock as timing source
    OC1CON2bits.SYNCSEL = 0x1F; // Select OC1 as synchronization source
                                // (self synchronization) -- Although we
                                // selected the system clock to determine
                                // the rate at which the PWM timer increments,
                                // we could have selected a different source
                                // to determine when each PWM cycle initiates.
                                // From the FRM: When the SYNCSEL<4:0> bits
                                // (OCxCON2<4:0>) = 0b11111, they make the
                                // timer reset when it reaches the value of
                                // OCxRS, making the OCx module use its
                                // own Sync signal.
    OC1CON2bits.OCTRIG = 0;     // Synchronizes with OC1 source instead of
                                // triggering with the OC1 source
    OC1CON1bits.OCM = 0b110;    // Edge-aligned PWM mode
    
    
    //-----------------------------------------------------------
    
    float in1 = ADC1BUF4;
    float in2 = ADC1BUF9;
    float in3 = ADC1BUF10;
    float dc = (in1/2048.0)*3999.0;
    

    // Wait and let the PWM do its job behind the scenes
    while(1){
        in1 = ADC1BUF4;
        in2 = ADC1BUF9;
        in3 = ADC1BUF10;
        dc = (in1/48.0) + (in2/48.0) + (in3/48.0); //+ (in2/8048.0)*3999.0;
        OC1R = dc;
        _LATA6 = 1;
    }
    
    //A1 as input
    //0 = pin2
    //1 = pin3
    //2 = pin4X
    //3 = pin5X
    //4 = pin6
    //5 = always high
    //6 = always low
    //7 = always high
    //9 = pin18
    //10 = pin17
    //Conclusion lets change to pin 6,17,18

    return 0;
}