/*
 * File:   newmainXC16.c
 * Author: mccda
 *
 * Created on November 16, 2017, 10:19 PM
 */


#pragma config ICS = PGx3 //this allows debugging.... use PGC/D pair 3 (pins 9,10) for debugging
#pragma config FNOSC = FRCDIV // select 8MHz oscillator with postscaler
#pragma config OSCIOFNC = OFF
#pragma config SOSCSRC = DIG
#include "xc.h"
#define FCY 4000000
#include <libpic30.h>

int state = 0;

int main(void) {
    

	/*** Configure Desired Port Pins as Analog Inputs ***/
	_TRISA0 = 1;		// TRISA/B, pg. 45 datasheet
	_ANSA0 = 1;			// ANSA/B, pg. 136-137


	/*** Select Voltage Reference Source ***/
	// use AVdd for positive reference
	_PVCFG = 00;		// AD1CON2<15:14>, pg. 212-213 datasheet
	// use AVss for negative reference
	_NVCFG = 0;			// AD1CON2<13>


	/*** Select Analog Conversion Clock Rate ***/
	// make sure Tad is at least 600ns, see Table 29-41 datasheet
	_ADCS = 0x02;	// AD1CON3<7:0>, pg. 213 datasheet


	/*** Select Sample/Conversion Sequence ***/
	// use auto-convert
	_SSRC = 0b0111;		// AD1CON1<7:4>, pg. 211 datasheet
	// use auto-sample
	_ASAM = 1;			// AD1CON1<2>
	// choose a sample time >= 1 Tad, see Table 29-41 datasheet
	_SAMC = 0b0001;		// AD1CON3<12:8> //make this 3


	/*** Choose Analog Channels to be Used ***/
	// scan inputs
	_CSCNA = 1;			// AD1CON2<10>
	// choose which channels to scan, e.g. for ch AN12, set _CSS12 = 1;
	_CSS0 = 1;			// AD1CSSH/L, pg. 217


	/*** Select How Results are Presented in Buffer ***/
	// set 12-bit resolution
	_MODE12 = 1;		// AD1CON1<10>
	// use absolute decimal format
	_FORM = 00;			// AD1CON1<9:8>
	// load results into buffer determined by converted channel, e.g. ch AN12 
    // results appear in ADC1BUF12
	_BUFREGEN = 1;		// AD1CON2<11>


	/*** Select Interrupt Rate ***/
	// interrupt rate should reflect number of analog channels used, e.g. if 
    // 5 channels, interrupt every 5th sample
	_SMPI = 0;		// AD1CON2<6:2>


	/*** Turn on A/D Module ***/
	_ADON = 1;			// AD1CON1<15>
    
    //-----------------------------------------------------------
    // CONFIGURE PWM1 USING OC1 (on pin 14)
    
    
    
    
    //-----------------------------------------------------------
    // CONFIGURE PWM1 USING OC1 (on pin 14)
    
    TRISAbits.TRISA6 = 0;
    
    // Clear control bits initially
    OC1CON1 = 0;
    OC1CON2 = 0;
   
    // Set period and duty cycle
    OC1R = 5000;                // Set Output Compare value to achieve
                                // desired duty cycle. This is the number
                                // of timer counts when the OC should send
                                // the PWM signal low. The duty cycle as a
                                // fraction is OC1R/OC1RS.
    OC1RS = 10000;               // Period of OC1 to achieve desired PWM 
                                // frequency, FPWM. See Equation 15-1
                                // in the datasheet. For example, for
                                // FPWM = 1 kHz, OC1RS = 3999. The OC1RS 
                                // register contains the period when the
                                // SYNCSEL bits are set to 0x1F (see FRM)
    
    // Configure OC1
    OC1CON1bits.OCTSEL = 0b111; // System (peripheral) clock as timing source
    OC1CON2bits.SYNCSEL = 0x1F; // Select OC1 as synchronization source
                                // (self synchronization) -- Although we
                                // selected the system clock to determine
                                // the rate at which the PWM timer increments,
                                // we could have selected a different source
                                // to determine when each PWM cycle initiates.
                                // From the FRM: When the SYNCSEL<4:0> bits
                                // (OCxCON2<4:0>) = 0b11111, they make the
                                // timer reset when it reaches the value of
                                // OCxRS, making the OCx module use its
                                // own Sync signal.
    OC1CON2bits.OCTRIG = 0;     // Synchronizes with OC1 source instead of
                                // triggering with the OC1 source
    OC1CON1bits.OCM = 0b110;    // Edge-aligned PWM mode
    
    
    //-----------------------------------------------------------
    
    //the light
    TRISAbits.TRISA1 = 0;
    _ANSA1 = 0;
    
    //the toutch
    TRISAbits.TRISA3 = 1;
    _ANSA3 = 0;
    
    TRISAbits.TRISA2 = 0;
    ANSAbits.ANSA2 = 0;
    TRISBbits.TRISB12 = 0;
    ANSBbits.ANSB12 = 0;
    TRISBbits.TRISB13 = 0;
    ANSBbits.ANSB13 = 0;
    
    //pin2 A0 = ir sensor
    //pin3 A1 = light
    //pin7 A2  = sleep
    //pin8 A3 = toutch
    //pin14 A6 = pwm
    //pin15 B12 = Dir1
    //pin16 B13 = Dir2
    
    int i=0;
    int found_goal = 0;

    // Wait and let the PWM do its job behind the scenes
    while(1){
        
        
        
        
        if(state == 0){
            _LATA2 = 1;
            _LATB12 = 1;
            _LATB13 = 0;
            _LATA6 = 1;
            
            
            if(ADC1BUF0>800){
                _LATA2 = 0;
                state = 1;
                _LATA1 = 1;
                __delay_ms(1000);
                _LATA1 = 0;
                
                if(found_goal>0){
                    state = 3;
                }
            }else{
                _LATA2 = 1;
            }
        }
        
        if(state == 1){
            found_goal++;
            _LATA2 = 1;
            _LATB12 = 1;
            _LATB13 = 1;
            _LATA6 = 1;
            if(_RA3){
                
                i = 0;
                while(i<10000){
                    OC1R = 50+i*5;
                    OC1RS = 10000+i*10;
                    i++;
                }
                
                
                _LATA2 = 0;
                state = 2;
                _LATA1 = 1;
                __delay_ms(2000);
                _LATA1 = 0;
                OC1R = 50;
                OC1RS = 10000;
            }
        }
        
        if(state == 2){
            _LATA2 = 1;
            _LATB12 = 0;
            _LATB13 = 0;
            _LATA6 = 1;
            __delay_ms(1250);
            _LATA2 = 0;
            state = 0;
            
            
            _LATA2 = 1;
            _LATB12 = 1;
            _LATB13 = 0;
            _LATA6 = 1;
            __delay_ms(100);
            
        }
        
        if(state == 3){
                i = 0;
                while(i<12){
                    _LATA1 = 1;
                    __delay_ms(500);
                    _LATA1 = 0;
                    i++;
                }
                
                    __delay_ms(5000);
                    state = 0;
        }
        
    }
    

    return 0;
}